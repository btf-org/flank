#!/usr/bin/env bash

run_cmd() {
    if [ "$1" != 'bg' ] && [ "$1" != 'fg' ]; then
	echo "first parameter $1 must be 'fg' or 'bg'"
	exit
    fi
    if [ -n "$2" ]; then
	if [ ! -f "$2" ]; then
	    echo "file: $2"' does not exist!'
	    exit
	fi
	local cmd_dir=$(dirname "$2")
	if [ $(basename "$cmd_dir") == 'saved_configs' ]; then
	    local cmd_dir=$(dirname "$cmd_dir")
	fi
    else
	local cmd_dir=$(pwd)
    fi
    # local cmd_name=$(basename $cmd_dir)

    local datetime=$(date '+%Y-%m-%dT%Hh%Mm%Ss')
    local cmd_run_date_dir=$cmd_dir/runs/$(echo $datetime | cut -c -10)
    mkdir -p $cmd_run_date_dir
    local cmd_run_dir=$cmd_dir/runs/$(echo $datetime | cut -c -10)/$(echo $datetime | cut -c 12-17)
    if ! mkdir $cmd_run_dir 2> /dev/null; then
	# include seconds
	cmd_run_dir=$cmd_dir/runs/$(echo $datetime | cut -c -10)/$(echo $datetime | cut -c 12-20)
	if ! mkdir $cmd_run_dir 2> /dev/null; then
	    local i=2
	    local non_incremented=$cmd_run_dir
	    cmd_run_dir=$non_incremented'_'$i
	    until mkdir $cmd_run_dir 2> /dev/null ; do
		i=$(($i + 1))
		cmd_run_dir=$non_incremented'_'$i
	    done
	fi
    fi

    # # Create date directory in runs
    # local global_date_dir="$FLANK_ROOT/runs/$(echo $datetime | cut -c -10)"
    # if [ ! -d $global_date_dir ]; then
    #     mkdir -p $global_date_dir
    # fi
    # local global_dir_name=$(basename "$cmd_run_dir")_$cmd_name

    # if [ -a "$global_date_dir/$global_dir_name" ]; then
    #     local path_prefix=$FLANK_ROOT/cmds/
    #     local mid_path=${cmd_run_dir#$path_prefix}
    #     local mid_path_safe=$(echo $mid_path | tr '/' '-')
    #     global_dir_name=$(basename "$cmd_run_dir")_$mid_path_safe
    # fi
    # echo $cmd_run_dir
    # echo "$global_date_dir/$global_dir_name"
    # ln -s $cmd_run_dir "$global_date_dir/$global_dir_name"
    

    if [ -n "$2" ]; then
	if [ $(basename "$2") == 'template.mk' ]; then
	    cp "$2" $cmd_run_dir/exec.mk
	else
	    cp "$2" $cmd_run_dir/exec.sh
	fi
    else
	if [ -f "$cmd_dir/template.mk" ]; then
	    cp $cmd_dir/template.mk $cmd_run_dir/exec.mk
	else
	    cp $cmd_dir/template.sh $cmd_run_dir/exec.sh
	fi
    fi

    local PID=''
    handle_int(){
      if [ -n "$PID" ]; then
	exit_code=$((128 + $(kill -l SIGINT)))
        printf 'ExitCode:\t%d\nEndTime:\t%d' $exit_code $(date '+%s') >> $cmd_run_dir/status
	kill -s SIGINT $PID
	exit $exit_code
      fi
    }
    handle_term(){
      if [ -n "$PID" ]; then
	exit_code=$((128 + $(kill -l SIGTERM)))
        printf 'ExitCode:\t%d\nEndTime:\t%d\n' $exit_code $(date '+%s') >> $cmd_run_dir/status
	kill -s SIGTERM $PID
	exit $exit_code
      fi
    }
    handle_kill(){
      if [ -n "$PID" ]; then
	exit_code=$((128 + $(kill -l SIGKILL)))
        printf 'ExitCode:\t%d\nEndTime:\t%d\n' $exit_code $(date '+%s') >> $cmd_run_dir/status
	kill -s SIGKILL $PID
	exit $exit_code
      fi
    }
    if [ "$1" == 'fg' ]; then
	trap handle_int INT
	trap handle_term TERM
	trap handle_kill KILL
    fi
    # Subtle quoting things:
    #  - $? needs to be escaped as \$? in "" or it will immediately evaluate
    #  - $(date) needs to be single quoted or it will immediately evaluate
    #  - $? needs to be evaluated before $(date) or it will return the exit code of $(date)
    if [ -f "$cmd_run_dir/exec.mk" ]; then
	if [ "$1" == 'bg' ]; then
	    nohup bash -c "printf 'StartTime:\t%s\n' "'$(date "+%s")'" > $cmd_run_dir/status; make -j -f $cmd_run_dir/exec.mk all 1> $cmd_run_dir/stdout.log 2> $cmd_run_dir/stderr.log ; printf 'ExitCode:\t%d\nEndTime:\t%d\n' \$? "'$(date "+%s")'" >> $cmd_run_dir/status" > testtest &
	else
	    printf 'StartTime:\t%s\n' $(date "+%s") > $cmd_run_dir/status
	    make -j -f $cmd_run_dir/exec.mk all 1> $cmd_run_dir/stdout.log 2> $cmd_run_dir/stderr.log & 
	    PID=$!
	    wait $PID
	    printf 'ExitCode:\t%d\nEndTime:\t%d\n' $? "$(date '+%s')" >> $cmd_run_dir/status
	fi
    else
	if [ "$1" == 'bg' ]; then
	    nohup bash -c "printf 'StartTime:\t%s\n' "'$(date "+%s")'" > $cmd_run_dir/status; bash $cmd_run_dir/exec.sh 1> $cmd_run_dir/stdout.log 2> $cmd_run_dir/stderr.log ; printf 'ExitCode:\t%d\nEndTime:\t%d\n' \$? "'$(date "+%s")'" >> $cmd_run_dir/status" > /dev/null &
	else
	    printf 'StartTime:\t%s\n' $(date "+%s") > $cmd_run_dir/status
	    bash $cmd_run_dir/exec.sh 1> $cmd_run_dir/stdout.log 2> $cmd_run_dir/stderr.log & 
	    PID=$!
	    wait $PID
	    local exit_code=$?
	    printf 'ExitCode:\t%d\nEndTime:\t%d\n' $exit_code "$(date '+%s')" >> $cmd_run_dir/status
	    return $exit_code
	fi
    fi
}

if [ -n "$1" ] && [ "$1" == 'run' ]; then 
    if [ -z "$2" ]; then
	echo 'Missing path to template / saved config `iflank run <path>`'
	exit 1
    fi

    exit_code=$(run_cmd "fg" "$2")
    exit $exit_code
fi



PAGE='HOME'
PROMPT='iflank> '
MODE='TTY'

help_msg(){
    printf 'Usage: iflank [run <path>] [--http-mode | -h]\n'
}

while [ "$1" != "" ]; do
    case $1 in
        --http-mode )           
	    MODE='HTTP'
	    PROMPT=''
	    PAGE='HTTP_INIT'
            ;;
        -h | --help ) 
	    help_msg
            exit
	    ;;
        * )              
	    help_msg
            exit 1
    esac
    shift
done

if [ -d /var/lib/flank ]; then
    FLANK_ROOT=/var/lib/flank
elif [ -d /opt/homebrew/var/flank ]; then
    FLANK_ROOT=/opt/homebrew/var/flank
elif [ -d /usr/local/var/flank ]; then
    FLANK_ROOT=/usr/local/var/flank
elif [ -n $(which brew) && $(brew --prefix) > 0 ]; then
    FLANK_ROOT=$(brew --prefix)/var
else 
    echo "Cannot find flank root!"
    exit
fi
PS_VERSION=''
FIND_VERSION=''
DATE_VERSION=''

cd $FLANK_ROOT
while true; do
    case "$PAGE" in
	HTTP_INIT)
	    read -rp "$PROMPT" choice
	    case $choice in
		refresh)
		    PAGE='HOME'
		    ;;
		*)
		    echo "Invalid input"
		    ;;
	    esac
	    ;;
	HOME)
	    pwd
	    echo ''
	    if [ $MODE == 'TTY' ]; then
		ls -1
	    else
		ls -1 | awk ' { print "<a onclick=\"run('\''cd "$0"'\'')\">"$0"</a>" } '
	    fi
	    echo ''
	    printf '\0'
	    read -rp "$PROMPT" choice args
	    case $choice in
		cd)
		    cd $args
		    if [ "$(pwd)" == $FLANK_ROOT/runs ]; then
			PAGE='GLOBAL_RUN_DATES'
		    else
			PAGE='FS'
		    fi
		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	GLOBAL_RUN_DATES)
	    pwd
	    echo ''
	    # if [ $MODE == 'TTY' ]; then
	    #     ls -1
	    # else
	    #     ls -1 | awk ' { print "<a onclick=\"run('\''cd "$0"'\'')\">"$0"</a>" } '
	    # fi
	    awk_columns='
		NR==1 { prev=FILENAME; } 
		FNR==1 && NR!=1 { 
		    if(st != ""){
			if(DATE_VERSION == "gnu"){
			    cmd = "date -d @"st" +\"%Y-%m-%d %H:%M:%S\""; 
			} else {
			    cmd = "date -r "st" +\"%Y-%m-%d %H:%M:%S\""; 
			}
			cmd | getline stf; 
			close(cmd);
		    } else {
			stf = "";
		    }

		    if(et != ""){
			if(DATE_VERSION == "gnu"){
			    cmd = "date -d @"et" +\"%Y-%m-%d %H:%M:%S\""; 
			} else {
			    cmd = "date -r "et" +\"%Y-%m-%d %H:%M:%S\""; 
			}
			cmd | getline etf;
			close(cmd);
		    } else {
			etf = "";
		    }

		    n = split(prev, path_parts, "/");
		    
		    pid="";
		    if(code == ""){
			logdir="";
			for(i = 1; i < n; i++){
			    logdir=logdir""path_parts[i];
			    if(i < n - 1) {
				logdir=logdir"/";
			    }
			}
			if(PS_VERSION=="procps"){
			    cmd = "ps -eo pid,args | grep \""logdir"\" | grep -v \"grep .*"logdir"\" | grep -v \"bash -c printf .*StartTime\" | cut -d\" \" -f1";
			}
			else {
			    cmd = "ps -x | grep \""logdir"\" | grep -v \"grep .*"logdir"\" | grep -v \"bash -c printf .*StartTime\" | cut -d\" \" -f1";
			}
			cmd | getline pid;
			close(cmd);
		    }

		    print prev, path_parts[n - 4], stf, etf, code, pid;

		    prev=FILENAME; 
		    st=""; 
		    et=""; 
		    code="";
		    pid="";
		} 
		/StartTime/ { st=$2; } 
		/EndTime/ { et=$2 } 
		/ExitCode/ { code=$2 } 
		END { 
		    if(st != ""){
			if(DATE_VERSION == "gnu"){
			    cmd = "date -d @"st" +\"%Y-%m-%d %H:%M:%S\""; 
			} else {
			    cmd = "date -r "st" +\"%Y-%m-%d %H:%M:%S\""; 
			}
			cmd | getline stf; 
			close(cmd);
		    } else {
			stf = "";
		    }

		    if(et != ""){
			if(DATE_VERSION == "gnu"){
			    cmd = "date -d @"et" +\"%Y-%m-%d %H:%M:%S\""; 
			} else {
			    cmd = "date -r "et" +\"%Y-%m-%d %H:%M:%S\""; 
			}
			cmd | getline etf;
			close(cmd);
		    } else {
			etf = "";
		    }

		    n = split(prev, path_parts, "/");
		    
		    pid="";
		    if(code == ""){
			logdir="";
			for(i = 1; i < n; i++){
			    logdir=logdir""path_parts[i];
			    if(i < n - 1) {
				logdir=logdir"/";
			    }
			}
			if(PS_VERSION=="procps"){
			    cmd = "ps -eo pid,args | grep \""logdir"\" | grep -v \"grep .*"logdir"\" | grep -v \"bash -c printf .*StartTime\" | cut -d\" \" -f1";
			}
			else {
			    cmd = "ps -x | grep \""logdir"\" | grep -v \"grep .*"logdir"\" | grep -v \"bash -c printf .*StartTime\" | cut -d\" \" -f1";
			}
			cmd | getline pid;
			close(cmd);
		    }

		    print prev, path_parts[n - 4], stf, etf, code, pid;
		}'
	    awk_tsv_to_html='
		BEGIN { 
		    print "<table>"
		    print "<thead><th>Command</th><th>Start Time</th><th>End Time</th><th>Exit Code</th><th>PID</th></thead>"
		    print "<tbody>"
		}
		{ 
		    cmd = "dirname "$1;
		    cmd | getline dir;
		    close(cmd)
		    print "<tr onclick=\"run('\''cd "dir"'\'')\"><td>"$2"</td><td>"$3"</td><td>"$4"</td><td>"$5"</td><td>"$6"</td></tr>" }
		END { print "</tbody></table>" }'

	    if [ -z "$PS_VERSION" ]; then
		if [ -n "$(ps --version 2> /dev/null | grep procps)" ]; then 
		    PS_VERSION='procps'
		else
		    PS_VERSION='bsd'
		fi
	    fi
	    if [ -z "$FIND_VERSION" ]; then
		if [ -n "$(find --version 2> /dev/null | grep GNU)" ]; then 
		    FIND_VERSION='gnu'
		else
		    FIND_VERSION='bsd'
		fi
	    fi
	    if [ -z "$DATE_VERSION" ]; then
		if [ -n "$(date --version 2> /dev/null | grep GNU)" ]; then 
		    DATE_VERSION='gnu'
		else
		    DATE_VERSION='bsd'
		fi
	    fi
	    if [ $MODE == 'TTY' ]; then
		if [ $FIND_VERSION == 'gnu' ]; then
		    find $FLANK_ROOT/cmds -type f -regextype posix-extended -regex '.*/[0-9]{4}-[0-9]{2}-[0-9]{2}/[0-9a-z]+/status' \
			| sed -E 's#.*/([0-9]{4}-[0-9]{2}-[0-9]{2}/.*)/status#\1\t&#' \
			| sort -nr \
			| cut -f2 \
			| xargs awk -v OFS='\t' -v PS_VERSION=$PS_VERSION -v DATE_VERSION=$DATE_VERSION "$awk_columns"
		else
		    find -E $FLANK_ROOT/cmds -type f -regex '.*/[0-9]{4}-[0-9]{2}-[0-9]{2}/[0-9a-z]+/status' \
			| sed -E 's#.*/([0-9]{4}-[0-9]{2}-[0-9]{2}/.*)/status#\1\t&#' \
			| sort -nr \
			| cut -f2 \
			| xargs awk -v OFS='\t' -v PS_VERSION=$PS_VERSION -v DATE_VERSION=$DATE_VERSION "$awk_columns"
		fi
	    else
		if [ $FIND_VERSION == 'gnu' ]; then
		    find $FLANK_ROOT/cmds -type f -regextype posix-extended -regex '.*/[0-9]{4}-[0-9]{2}-[0-9]{2}/[0-9a-z]+/status' \
			| sed -E 's#.*/([0-9]{4}-[0-9]{2}-[0-9]{2}/.*)/status#\1\t&#' \
			| sort -nr \
			| cut -f2 \
			| xargs awk -v OFS='\t' -v PS_VERSION=$PS_VERSION -v DATE_VERSION=$DATE_VERSION "$awk_columns" \
			| awk -v FS='\t' "$awk_tsv_to_html"
		else
		    find -E $FLANK_ROOT/cmds -type f -regex '.*/[0-9]{4}-[0-9]{2}-[0-9]{2}/[0-9a-z]+/status' \
			| sed -E 's#.*/([0-9]{4}-[0-9]{2}-[0-9]{2}/.*)/status#\1\t&#' \
			| sort -nr \
			| cut -f2 \
			| xargs awk -v OFS='\t' -v PS_VERSION=$PS_VERSION -v DATE_VERSION=$DATE_VERSION "$awk_columns" \
			| awk -v FS='\t' "$awk_tsv_to_html"
		fi
	    fi
	    printf '\0'
	    
	    read -rp "$PROMPT" choice args
	    case $choice in
		cd)
		    cd $args
		    if [ "$args" == '..' ]; then
			PAGE='HOME'
		    else
			PAGE='LOG_DIR'
		    fi
		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	PS)
	    if [ -z "$PS_VERSION" ]; then
		if [ -n "$(ps --version 2> /dev/null | grep procps)" ]; then 
		    PS_VERSION='procps'
		else
		    PS_VERSION='bsd'
		fi
	    fi
	    if [ $PS_VERSION == 'procps' ]; then 
		ps -eo pid,args | grep "$FLANK_ROOT/.*/exec\." | grep -v "grep .*$FLANK_ROOT" | grep -v "bash -c printf .*StartTime"
	    else
		ps -x | grep "$FLANK_ROOT""/.*/exec\." | grep -v "grep .*""$FLANK_ROOT" | grep -v "bash -c printf .*StartTime"
	    fi
	    echo ''
	    echo '(B)ack / (K)ill <pid> / (L)ogs <pid>'
	    echo ''
	    printf '\0'
	    read -rp "$PROMPT" choice args
	    case $choice in 
		B)
		    PAGE='HOME'
		    ;;
		K)
		    kill $args 
		    PAGE='PS'
		    ;;
		L)
		    if [ -z "$PS_VERSION" ]; then
			if [ -n "$(ps --version 2> /dev/null | grep procps)" ]; then 
			    PS_VERSION='procps'
			else
			    PS_VERSION='bsd'
			fi
		    fi
		    if [ $PS_VERSION == 'procps' ]; then 
			log_dir=$(ps e $args | grep -o -e "$FLANK_ROOT""[^[:space:]]*/exec.sh" -e "$FLANK_ROOT""[^[:space:]]*/exec.mk" | xargs dirname)
		    else
			log_dir=$(ps $args | grep -o -e "$FLANK_ROOT""[^[:space:]]*/exec.sh" -e "$FLANK_ROOT""[^[:space:]]*/exec.mk" | xargs dirname)
		    fi
		    cd $log_dir
		    PAGE='LOG_DIR'

		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	FS)
	    pwd
	    echo ""
	    if [ $MODE == 'TTY' ]; then
		ls -1
	    else
		ls -1 | awk ' { print "<a onclick=\"run('\''cd "$0"'\'')\">"$0"</a>" } '
	    fi
	    echo ""
	    echo "Next: cd [dir]"
	    echo ""
	    printf '\0'
	    read -rp "$PROMPT" choice arg
	    case $choice in
		cd)
		    cd $arg
		    if [ -f template.sh ] || [ -f template.mk ]; then
			PAGE='CMD'
		    else
			PAGE='FS'
		    fi
		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	CMD)
	    pwd
	    echo ''
	    echo 'Next: (R)un / (L)ogs / (H)ome'
	    echo ''
	    printf '\0'
	    read -rp "$PROMPT" choice
	    case $choice in
		R)
		    run_cmd 'bg'
		    PAGE='CMD'
		    ;;
		L)
		    cd runs
		    PAGE='CMD_RUN_DATES'
		    ;;
		H)
		    cd $FLANK_ROOT
		    PAGE='HOME'
		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	CMD_RUN_DATES)
	    pwd
	    echo ''
	    ls -1
	    echo ''
	    echo 'Next: cd [dir]'
	    printf '\0'
	    read -rp "$PROMPT" choice args
	    case $choice in
		cd)
		    cd $args
		    if [ "$args" == '..' ]; then
			PAGE='CMD'
		    else
			PAGE='LOG_DAY'
		    fi
		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	LOG_DAY)
	    pwd
	    echo ''
	    ls -1
	    echo ''
	    echo 'Next: cd [dir]'
	    printf '\0'
	    read -rp "$PROMPT" choice args
	    case $choice in
		cd)
		    cd $args
		    if [ "$args" == '..' ]; then
			PAGE='CMD'
		    else
			PAGE='LOG_DIR'
		    fi
		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	LOG_DIR)
	    pwd
	    echo ''
	    ls -1
	    echo ''
	    if [ "$PS_VERSION" == 'procps' ]; then
		pid=$(ps -eo pid,args | grep $(pwd) | grep -v "grep .*"$(pwd) | grep -v "bash -c printf .*StartTime" | cut -d" " -f1)
	    else
		pid=$(ps -x | grep $(pwd) | grep -v "grep .*"$(pwd) | grep -v "bash -c printf .*StartTime" | cut -d" " -f1)
	    fi
	    if [ -z "$pid" ]; then
		echo 'Next: cat [file] / cd [dir]'
	    else
		echo 'Next: cat [file] / cd [dir] / kill'
	    fi
	    printf '\0'
	    read -rp "$PROMPT" choice args
	    case $choice in
		kill)
		    kill $pid
		    ;;
		cat)
		    cat $args
		    echo ''
		    ;;
		cd)
		    cd $args
		    if [ "$args" == '..' ]; then
			PAGE='CMD_RUN_DATES'
		    elif [ "$args" == '../..' ]; then
			PAGE='CMD'
		    fi
		    ;;
		refresh)
		    ;;
		*)
		    read -rp "Invalid choice! Hit [Enter] to continue"
		    ;;
	    esac
	    ;;
	*)
	    echo "Got into weird state. Hit Ctrl-C to quit"
	    ;;
    esac
done
